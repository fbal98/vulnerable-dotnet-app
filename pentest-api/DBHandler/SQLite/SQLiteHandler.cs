using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Configuration;

namespace MCD.ApiGateway.DBHandler.SQLite
{
    public class SqliteDbHandler : ISqliteDbHandler
    {
        private readonly IConfiguration _configuration;
        private readonly string _connectionString;

        public SqliteDbHandler(IConfiguration configuration)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _connectionString = _configuration["SQLiteConnectionString"] ?? throw new ArgumentException("Configuration must include a valid 'SQLiteConnectionString'.");
        }

        private SqliteConnection GetConnection()
        {
            return new SqliteConnection(_connectionString);
        }

        public DataTable ExecuteQuery(string query, Dictionary<string, object> parameters)
        {
            using var connection = GetConnection();
            using var command = CreateCommand(connection, query, parameters);
            connection.Open();
            using var reader = command.ExecuteReader();

            var dataTable = new DataTable();
            dataTable.Load(reader);
            return dataTable;
        }

        public int ExecuteNonQuery(string query, Dictionary<string, object> parameters)
        {
            using var connection = GetConnection();
            using var command = CreateCommand(connection, query, parameters);
            connection.Open();
            return command.ExecuteNonQuery();
        }

        public object ExecuteScalar(string query, Dictionary<string, object> parameters)
        {
            using var connection = GetConnection();
            using var command = CreateCommand(connection, query, parameters);
            connection.Open();
            return command.ExecuteScalar();
        }

        private SqliteCommand CreateCommand(SqliteConnection connection, string query, Dictionary<string, object> parameters)
        {
            var command = connection.CreateCommand();
            command.CommandText = query;

            foreach (var parameter in parameters)
            {
                command.Parameters.AddWithValue(parameter.Key, parameter.Value);
            }

            return command;
        }

        public void InitializeDatabase()
        {
            using var connection = GetConnection();
            connection.Open();
            using var command = connection.CreateCommand();

            // Create Users table
            command.CommandText = @"
        CREATE TABLE IF NOT EXISTS Users (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            UserName TEXT NOT NULL,
            Password TEXT NOT NULL,
            Role TEXT DEFAULT 'User'
        );
    ";
            command.ExecuteNonQuery();

            // Create Shares table
            command.CommandText = @"
        CREATE TABLE IF NOT EXISTS Shares (
            ShareId INTEGER PRIMARY KEY AUTOINCREMENT,
            UserId INTEGER NOT NULL,
            CompanyName TEXT NOT NULL,
            NumberOfShares INTEGER NOT NULL,
            PurchaseDate DATETIME NOT NULL,
            FOREIGN KEY (UserId) REFERENCES Users(Id)
        );
    ";
            command.ExecuteNonQuery();
        }

    }
}
