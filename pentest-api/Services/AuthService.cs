using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MCD.ApiGateway.DBHandler.SQLite;
using MCD.ApiGateway.Models;
using MCD.ApiGateway.Services;
using Microsoft.AspNetCore.Http.HttpResults;
using Models;


public class AuthService : IAuthService
{
    private readonly ISqliteDbHandler _dbHandler;
    private readonly JwtTokenService _jwtTokenService;

    public AuthService(ISqliteDbHandler dbHandler, JwtTokenService jwtTokenService)
    {
        _jwtTokenService = jwtTokenService ?? throw new ArgumentNullException(nameof(jwtTokenService));
        _dbHandler = dbHandler ?? throw new ArgumentNullException(nameof(dbHandler));
    }



    public ApiResponse<AuthResponse> Login(User user)
    {
        try
        {
            var query = "SELECT * FROM Users WHERE UserName = @UserName AND Password = @Password";
            var parameters = new Dictionary<string, object>
        {
            { "@UserName", user.UserName },
            { "@Password", user.Password }
        };


            var result = _dbHandler.ExecuteQuery(query, parameters);

            if (result.Rows.Count == 0)
            {
                return new ApiResponse<AuthResponse>
                {
                    Message = "Invalid username or password",
                    Data = null
                };
            }

            var theNewUser = new User
            {
                Id = Convert.ToInt32(result.Rows[0]["Id"]),
                UserName = result.Rows[0]["UserName"].ToString(),
                Role = result.Rows[0]["Role"].ToString()
            };
            var token = _jwtTokenService.GenerateToken(theNewUser);

            return new ApiResponse<AuthResponse>
            {
                Message = "Login successfull",
                Data = new AuthResponse(token)
            };

        }
        catch (System.Exception)
        {

            throw;
        }
    }

    public ApiResponse<AuthResponse> Register(User user)
    {
        try
        {
            var query = string.Format("INSERT INTO Users (UserName, Password, Role) VALUES ('{0}', '@Password', '{1}')", user.UserName, user.Role);
            var parameters = new Dictionary<string, object>
        {
            { "@UserName", user.UserName },
            { "@Password", user.Password },
            {"@Role", user.Role}
        };

            var result = _dbHandler.ExecuteNonQuery(query, parameters);


            if (result == 0)
            {
                return new ApiResponse<AuthResponse>
                {
                    Message = "User registration failed",
                    Data = null
                };
            }


            return new ApiResponse<AuthResponse>
            {
                Message = "User registered successfully",
                Data = new AuthResponse("log in for the token")
            };
        }
        catch (Exception ex)
        {
            // Handle the exception
            return new ApiResponse<AuthResponse>
            {
                Message = "An error occurred: " + ex.Message,
                Data = null
            };
        }
    }

}