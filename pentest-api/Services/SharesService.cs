using System.Data;
using MCD.ApiGateway.DBHandler.SQLite;
using MCD.ApiGateway.Models;

namespace MCD.ApiGateway.Services
{
    public class SharesService : ISharesService
    {

        private readonly ISqliteDbHandler _dbHandler;


        public SharesService(ISqliteDbHandler dbHandler)
        {
            _dbHandler = dbHandler ?? throw new ArgumentNullException(nameof(dbHandler));

        }


        public ApiResponse<Share> AddShares(Share share)
        {

            try
            {
                var query = "INSERT INTO Shares (UserId, CompanyName, NumberOfShares, PurchaseDate) VALUES (@UserId, @CompanyName, @NumberOfShares, @PurchaseDate)";
                var parameters = new Dictionary<string, object>
                {
                    { "@UserId", share.UserId },
                    { "@CompanyName", share.CompanyName },
                    { "@NumberOfShares", share.NumberOfShares },
                    { "@PurchaseDate", share.PurchaseDate }
                };

                var result = _dbHandler.ExecuteNonQuery(query, parameters);

                if (result == 0)
                {
                    return new ApiResponse<Share>
                    {
                        Message = "Failed to add share",
                        Data = null
                    };
                }

                return new ApiResponse<Share>
                {
                    Message = "Share added successfully",
                    Data = share
                };

            }
            catch (System.Exception)
            {

                throw new Exception("Failed to add share");
            }
        }

        public ApiResponse<Share> DeleteShares(int shareId)
        {
            try
            {
                var query = "DELETE FROM Shares WHERE ShareId = @ShareId";
                var parameters = new Dictionary<string, object>
                {
                    { "@ShareId", shareId }
                };

                var result = _dbHandler.ExecuteNonQuery(query, parameters);

                if (result == 0)
                {
                    return new ApiResponse<Share>
                    {
                        Message = "Failed to delete share",
                        Data = null
                    };
                }

                return new ApiResponse<Share>
                {
                    Message = "Share deleted successfully",
                    Data = null
                };
            }
            catch (System.Exception)
            {

                throw new Exception("Failed to delete share");
            }
        }

        public ApiResponse<List<Share>> GetShares(int userId)
        {
            try
            {
                var query = "SELECT * FROM Shares WHERE UserId = @UserId";
                var parameters = new Dictionary<string, object>
                {
                    { "@UserId", userId }
                };

                var result = _dbHandler.ExecuteQuery(query, parameters);
                Console.WriteLine("Shares: " + result.Rows.Count);
                if (result.Rows.Count == 0)
                {
                    return new ApiResponse<List<Share>>
                    {
                        Message = "No shares found",
                        Data = []
                    };
                }

                var shares = new List<Share>();

                foreach (DataRow row in result.Rows)
                {
                    Console.WriteLine("Row: " + row["ShareId"]);

                    shares.Add(new Share
                    {
                        ShareId = Convert.ToInt32(row["ShareId"]),
                        UserId = Convert.ToInt32(row["UserId"]),
                        CompanyName = row["CompanyName"].ToString(),
                        NumberOfShares = Convert.ToInt32(row["NumberOfShares"]),
                        PurchaseDate = Convert.ToDateTime(row["PurchaseDate"])
                    });
                }

                Console.WriteLine("Shares: " + shares.Count);
                return new ApiResponse<List<Share>>
                {
                    Message = "Shares retrieved successfully",
                    Data = shares
                };

            }
            catch (System.Exception)
            {

                throw new Exception("Failed to retrieve shares");
            }
        }

        public ApiResponse<Share> UpdateShares(Share share)
        {
            try
            {
                var query = "UPDATE Shares SET CompanyName = @CompanyName, NumberOfShares = @NumberOfShares, PurchaseDate = @PurchaseDate WHERE ShareId = @ShareId";
                var parameters = new Dictionary<string, object>
                {
                    { "@CompanyName", share.CompanyName },
                    { "@NumberOfShares", share.NumberOfShares },
                    { "@PurchaseDate", share.PurchaseDate },
                    { "@ShareId", share.ShareId }
                };

                var result = _dbHandler.ExecuteNonQuery(query, parameters);

                if (result == 0)
                {
                    return new ApiResponse<Share>
                    {
                        Message = "Failed to update share",
                        Data = null
                    };
                }

                return new ApiResponse<Share>
                {
                    Message = "Share updated successfully",
                    Data = share
                };
            }
            catch (System.Exception)
            {

                throw new Exception("Failed to update share");
            }
        }
    }

}
