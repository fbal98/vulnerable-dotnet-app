using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using MCD.ApiGateway.Services;
using System.Security.Claims;
using MCD.ApiGateway.Models;

namespace WebApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class SharesController : ControllerBase
    {

        private readonly ISharesService _sharesService;

        public SharesController(ISharesService sharesService)
        {
            _sharesService = sharesService ?? throw new ArgumentNullException(nameof(sharesService));
        }


        //GET my shares
        // GET: /shares
        [HttpGet]
        public IActionResult GetShares()
        {
            try
            {
                var userClaim = User.FindFirst("UserId")?.Value;

                if (userClaim == null)
                {
                    return Unauthorized(new { Message = "User ID claim not found" });
                }

                if (!int.TryParse(userClaim, out int userId))
                {
                    return BadRequest(new { Message = "Invalid user ID" });
                }

                Console.WriteLine("User ID: " + userId);
                var shares = _sharesService.GetShares(userId);

                return Ok(shares);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = $"An error occurred: {ex.Message}" });
            }
        }


        [HttpPost]
        public IActionResult AddShares(Share share)
        {
            try
            {
                var userClaim = User.FindFirst("UserId")?.Value;

                if (userClaim == null)
                {
                    return Unauthorized(new { Message = "User ID claim not found" });
                }

                if (!int.TryParse(userClaim, out int userId))
                {
                    return BadRequest(new { Message = "Invalid user ID" });
                }

                share.UserId = userId;

                var result = _sharesService.AddShares(share);

                if (result.Data == null)
                {
                    return BadRequest(new { Message = result.Message });
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = $"An error occurred: {ex.Message}" });
            }
        }


        [HttpDelete("{shareId}")]
        public IActionResult DeleteShares(int shareId)
        {
            try
            {
                var result = _sharesService.DeleteShares(shareId);

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = $"An error occurred: {ex.Message}" });
            }
        }


        [HttpPut("{shareId}")]
        public IActionResult UpdateShares(int shareId, Share share)
        {
            try
            {
                var userClaim = User.FindFirst("UserId")?.Value;

                if (userClaim == null)
                {
                    return Unauthorized(new { Message = "User ID claim not found" });
                }

                if (!int.TryParse(userClaim, out int userId))
                {
                    return BadRequest(new { Message = "Invalid user ID" });
                }

                share.UserId = userId;
                share.ShareId = shareId;

                var result = _sharesService.UpdateShares(share);

                if (result.Data == null)
                {
                    return BadRequest(new { Message = result.Message });
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = $"An error occurred: {ex.Message}" });
            }

        }


    }

}

