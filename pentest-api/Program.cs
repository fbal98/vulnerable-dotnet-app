using System.Text;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using MCD.ApiGateway.Services;
using MCD.ApiGateway.DBHandler.SQLite;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddControllers();

// Register 
builder.Services.AddScoped<JwtTokenService>();
builder.Services.AddSingleton<ISqliteDbHandler, SqliteDbHandler>();
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddScoped<ISqliteDbHandler, SqliteDbHandler>();
builder.Services.AddScoped<ISharesService, SharesService>();

using (var scope = builder.Services.BuildServiceProvider().CreateScope())
{
    var sqliteHandler = scope.ServiceProvider.GetRequiredService<ISqliteDbHandler>();
    sqliteHandler.InitializeDatabase();
}

// Register CORS policy
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins", builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyMethod()
               .AllowAnyHeader();
    });
});

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? throw new ArgumentNullException("Jwt:Key"))),
        ValidateIssuer = true,
        ValidateAudience = false,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
    };
});

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("AdminPolicy", policy => policy.RequireRole("Admin"));
    options.AddPolicy("UserPolicy", policy => policy.RequireRole("User", "Admin"));
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.UseCors("AllowAllOrigins");

app.MapControllers();

// Global route for unknown routes: return response with status code 404
app.MapFallback((httpContext) =>
{
    httpContext.Response.StatusCode = 404;
    httpContext.Response.ContentType = "text/html";
    return httpContext.Response.WriteAsync("<html><body><h1>404 - Not Found</h1></body></html>");
});

app.Run();
